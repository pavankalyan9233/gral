#!/bin/bash

# Needed environment variables:
#   DEPLOYMENT_URL (without port component)
# and:
#   either ARANGO_GRAPH_TOKEN (provided by a call to oasisctl)
#   or (ARANGO_GRAPH_API_KEY_ID and ARANGO_GRAPH_API_SECRET)
# In the latter case, every call to this script will use an additional
# API call to get the token from the API key. Note that this imposes a
# certain delay!
#
# For the `api` subcommand the environment variable ENGINE_URL needs to
# be set!
#
# Do not forget to set the feature flag "GraphAnalytics" (without the quotes)
# for your organization, probably before you create the deployment!
#
# This script needs the tools `curl` and `jq` installed!
#

if [ "$ARANGO_GRAPH_TOKEN" == "" ] ; then
    ARANGO_GRAPH_TOKEN=$(curl "https://dashboard.adbdev.cloud/api/iam/v1/apikeys/$ARANGO_GRAPH_API_KEY_ID/authenticate?secret=$ARANGO_GRAPH_API_KEY_SECRET" -X POST | jq .token -r)
fi

if [ "$DEPLOYMENT_URL" == "" ] ; then
    echo "Need DEPLOYMENT_URL (without port) from environment."
    exit 2
fi

function checkEngineURL () {
    if [ "$ENGINE_URL" == "" ] ; then
        echo "Need ENGINE_URL from environment."
        exit 3
    fi
}

# Subcommands:
function help () {
  cat <<'EOF'
gae <subcommand> 

  where <subcommand> is any of
    - version           : show version
    - enginetypes       : show possible engine types
    - enginesizes       : show possible engine sizes
    - engines           : show currently deployed engines
    - engine <ID>       : show info about engine with ID <ID>
    - deploy            : deploy an engine, needs a body with '-d' arguments
          as for curl, example:
          -d '{"type_id":"sloth-main", "size_id": "e4"}'
    - delete <ID>       : delete the engine with ID <ID>
    - api <API> <BODY>  : call engine, needs ENGINE_URL env variable set
EOF
}

export BASEURL="$DEPLOYMENT_URL:8829/graph-analytics/api/graphanalytics/v1"
if [ -z "$AUTH" ] ; then
    export AUTH="Authorization: bearer $ARANGO_GRAPH_TOKEN"
fi
if [ -z "$APIAUTH" ] ; then
    export APIAUTH="$AUTH"
fi

subcommand=$1
shift

case $subcommand in
  version)
    curl -s $BASEURL/api-version -H "$AUTH" "$@"
    ;;
  enginetypes)
    curl -s $BASEURL/enginetypes -H "$AUTH" "$@"
    ;;
  enginesizes)
    curl -s $BASEURL/enginesizes -H "$AUTH" "$@"
    ;;
  engines)
    curl -s $BASEURL/engines -H "$AUTH" "$@"
    ;;
  engine)
    id=$1
    shift
    curl -s $BASEURL/engines/"$id" -H "$AUTH" "$@"
    ;;
  deploy)
    curl -s $BASEURL/engines -H "$AUTH" "$@"
    ;;
  delete)
    id=$1
    shift
    curl -s $BASEURL/engines/"$id" -H "$AUTH" -X DELETE "$@"
    ;;
  api)
    checkEngineURL
    apipath="$1"
    shift
    curl -s "$ENGINE_URL/$apipath" -H "$APIAUTH" -H "Content-type: application/json" "$@"
    ;;
  help)
    help
    exit 0
    ;;
  *)
    echo Unknown subcommand! See "gae help" for a list of available commands!
    ;;
esac
