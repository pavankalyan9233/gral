version: 2.1

orbs:
  gcp-gcr: circleci/gcp-gcr@0.15
  slack: circleci/slack@4.12.5

aliases:
  - &notify_slack_on_fail
    slack/notify:
      channel: "C05MRHRKPRS" # status-sloth
      event: fail
      template: basic_fail_1
  - &notify_slack_on_release
    slack/notify:
      channel: "C05MRHRKPRS" # status-sloth
      event: pass
      template: success_tagged_deploy_1

commands:
  get_code:
    steps:
      - attach_workspace:
          at: /tmp/workspace
      - run:
          name: Get code from workspace
          command: cp -r /tmp/workspace/code/. ~/app

  install_protobuf:
    steps:
      - run:
          name: Install protobuf dependency
          command: |
            sudo apt update -y
            sudo apt install protobuf-compiler -y

jobs:
  do_copy_workspace:
    docker:
      - image: cimg/rust:1.76.0
    working_directory: ~/app
    steps:
      - checkout
      - run:
          name: Copy code to workspace
          command: |
            mkdir -p /tmp/workspace/code
            cp -r . /tmp/workspace/code
      - persist_to_workspace:
          root: /tmp/workspace
          paths: code

  lint:
    docker:
      - image: cimg/rust:1.76.0
    working_directory: ~/app
    steps:
      - get_code
      - install_protobuf
      - restore_cache:
          keys:
            - v1-cargo-deps-cache-{{ .Branch }}-{{ checksum "Cargo.lock" }}

      - run:
          name: Clippy
          command: cargo clippy -- -D warnings

      - *notify_slack_on_fail

  formatter:
    docker:
      - image: cimg/rust:1.76.0
    working_directory: ~/app
    steps:
      - get_code
      - install_protobuf
      - restore_cache:
          keys:
            - v1-cargo-deps-cache-{{ .Branch }}-{{ checksum "Cargo.lock" }}

      - run:
          name: Format check
          command: cargo fmt --all -- --check

      - *notify_slack_on_fail

  coverage:
    docker:
      - image: cimg/rust:1.76.0
    working_directory: ~/app
    steps:
      - get_code
      - install_protobuf
      - restore_cache:
          keys:
            - v1-coverage-deps-cache-{{ .Branch }}-{{ checksum "Cargo.lock" }}
      - run:
          name: Coverage UnitTests
          command: |
            cargo install grcov
            rustup component add llvm-tools-preview
            CARGO_INCREMENTAL=0 RUSTFLAGS='-Cinstrument-coverage' LLVM_PROFILE_FILE='cargo-test-%p-%m.profraw' cargo test --lib
            grcov . --binary-path ./target/debug/deps/ -s . -t html --branch --ignore-not-existing --ignore '../*' --ignore "/*" -o target/coverage/html

      - store_artifacts:
          path: target/coverage/html

      - save_cache:
          key: v1-coverage-deps-cache-{{ .Branch }}-{{ checksum "Cargo.lock" }}
          paths: ["target/debug/deps"]
          # TODO Later - *notify_slack_on_fail

  integration:
    docker:
      - image: cimg/rust:1.76.0
      - image: neunhoef/auth_grpc
        entrypoint:
          - /bin/sh
          - -c
          - mkdir /secrets && echo -n 'SuperSecretThingy' > /secrets/token && md5sum /secrets/token && /bin/arangodb_operator_integration --integration.authentication.v1 --integration.authentication.v1.path=/secrets --services.address=0.0.0.0:9092
      - image: arangodb/enterprise:3.12.0-deb
        command: |
          /bin/sh -c "echo -n 'SuperSecretThingy' > /tmp/arangodb.secret && md5sum /tmp/arangodb.secret && arangodb --mode=cluster --local=true --auth.jwt-secret=/tmp/arangodb.secret"
    working_directory: ~/app
    steps:
      - get_code
      - install_protobuf
      - restore_cache:
          keys:
            - v1-cargo-deps-cache-{{ .Branch }}-{{ checksum "Cargo.lock" }}
      - run:
          name: Integration Tests ArangoDB Auth
          command: |
            RUST_BACKTRACE=1
            cargo test --features test_arangodb_auth -- --test-threads=1
            cargo test --features test_grpc_auth -- --test-threads=1
            cargo test --features test_grpc_auth_unavailable -- --test-threads=1
            cargo test --test '*'

  build:
    docker:
      - image: cimg/rust:1.76.0
    working_directory: ~/app
    steps:
      - get_code
      - install_protobuf

      - restore_cache:
          keys:
            - v1-cargo-deps-cache-{{ .Branch }}-{{ checksum "Cargo.lock" }}

      - run:
          name: Run tests
          command: cargo test --lib

      - run:
          name: Build release
          command: |
            cargo build --release

      # TODO: Potentially we do cache here to much. Let's check in detail which sub-directories here needs to
      # be cached (target/debug/build, target/debug/deps, ...).
      - save_cache:
          key: v1-cargo-deps-cache-{{ .Branch }}-{{ checksum "Cargo.lock" }}
          paths: ["target/debug/deps"]

  docs:
    docker:
      - image: pseudomuto/protoc-gen-doc

    working_directory: ~/app
    steps:
      - get_code

      - run:
          name: Build documentation
          command: |
            apk add jq
            apk add sed
            apk add curl
            protoc -I proto --doc_out=protodoc --doc_opt=protodoc/ourhtml.mustache,graphanalytics.html proto/graphanalyticsengine.proto
            jq --slurp --raw-input '{"text": "\(.)", "mode": "markdown"}' < ./protodoc/setup.md | curl --data @- https://api.github.com/markdown > ./protodoc/setup.html && \
            sed -i -e '/<!--INSERTHERE-->/r protodoc/setup.html' protodoc/graphanalytics.html

      - store_artifacts:
          path: protodoc/

  #build-and-push-docker-image:
  #  description: Build and push a docker image
  #  parameters:
  #    tag:
  #      default: "latest"
  #      type: string
  #  machine:
  #    image: ubuntu-2204:current
  #  resource_class: medium
  #  steps:
  #    - attach_workspace:
  #        at: .
  #    - gcp-gcr/gcr-auth
  #    - gcp-gcr/build-image:
  #        image: graph-analytics/sloth
  #        registry-url: gcr.io
  #        tag: << parameters.tag >>
  #        dockerfile: build/deploy.dockerfile
  #        extra_build_args: --build-arg GIT_HASH=$CIRCLE_SHA1
  #    - gcp-gcr/push-image:
  #        digest-path: /tmp/digest.txt
  #        image: graph-analytics/sloth
  #        registry-url: gcr.io
  #        tag: << parameters.tag >>
  #    - run:
  #        name: Digest
  #        command: |
  #          echo "Digest is: $(</tmp/digest.txt)"
  #    - *notify_slack_on_fail
  #    - *notify_slack_on_release

workflows:
  pr:
    when:
      not:
        equal: [main, << pipeline.git.branch >>]
    jobs:
      - do_copy_workspace
      - lint:
          requires:
            - do_copy_workspace
      - formatter:
          requires:
            - do_copy_workspace
      - coverage:
          requires:
            - do_copy_workspace
      - integration:
          requires:
            - do_copy_workspace
      - build:
          requires:
            - do_copy_workspace
            - lint
            - formatter
            - coverage
            - integration
      - docs:
          requires:
            - do_copy_workspace

      #- build-and-push-docker-image:
      #    context:
      #      - slack
      #      - gcp-sloth
      #    requires:
      #      - build
      #      - lint
      #    tag: latest

      #deploy:
      #  when:
      #    equal: [main, << pipeline.git.branch >>]
      #  jobs:
      #    - do_copy_workspace
      #    - build:
      #        requires:
      #          - do_copy_workspace
      #    - lint:
      #        requires:
      #          - do_copy_workspace
      #    - formatter:
      #        requires:
      #          - do_copy_workspace
      #- docs:
      #    requires:
      #      - do_copy_workspace
      #- build-and-push-docker-image:
      #    context:
      #      - slack
      #      - gcp-sloth
      #    requires:
      #      - build
      #      - lint
      #    tag: main
