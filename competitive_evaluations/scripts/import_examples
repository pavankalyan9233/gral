#!/bin/bash

#############################################
### ArangoDB
#############################################

# Currently it is expected that ArangoDB is running.

# Import data into ArangoDB
(
  cd ../examples || return
  npm i
  node main.js --graphName wiki-Talk -d true --mqs 500 --con 50      # 2XS
  node main.js --graphName kgs -d true --mqs 500 --con 50            # XS
  node main.js --graphName dota-league -d true --mqs 500 --con 50    # S
  node main.js --graphName datagen-8_0-fb -d true --mqs 500 --con 50 # M
  node main.js --graphName datagen-8_5-fb -d true --mqs 500 --con 50 # L	
  node main.js --graphName twitter_mpi -d true --mqs 500 --con 50    # XL
)

#############################################
### Gral
#############################################

# We will always load a new graph for every benchmark as our service is separated from the database
# and the loading itself should be part of the benchmark.

#############################################
### Neo4j
#############################################

(
  cd ../examples/neo4j || return
  node main.js --graphName wiki-Talk --d true --mqs 20 --con 10      # 2XS
  node main.js --graphName kgs --d true --mqs 20 --con 10            # XS
  node main.js --graphName dota-league --d true --mqs 20 --con 10    # S
  node main.js --graphName datagen-8_0-fb --d true --mqs 20 --con 10 # M
  node main.js --graphName datagen-8_5-fb --d true --mqs 20 --con 10 # L
  node main.js --graphName twitter_mpi --d true --mqs 20 --con 10    # XL
)

