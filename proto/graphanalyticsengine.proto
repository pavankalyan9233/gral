// 
// DISCLAIMER
// 
// Copyright 2023 ArangoDB GmbH, Cologne, Germany
// 

syntax = "proto3";

package arangodb.cloud.internal.graphanalytics.v1;

option go_package = "github.com/arangodb-managed/apis/graphanalytics/v1";

// import "common/v1/icommon.proto";
// import "common/v1/common.proto";

// import "github.com/golang/protobuf/ptypes/timestamp/timestamp.proto";
import "google/api/annotations.proto";

// GraphAnalyticsEngineService is the API used interact with graph
// analytics engines, which belongs to a deployment. Note that a
// GraphAnalyticsEngine has an associated deployment on AG. Every call,
// which can take longer to complete is asynchronous in the sense that
// it returns a jobId and the result can/must be retrieved separately.
// All // GET calls are naturally idempotent.
// Here is an overview over the API, note that a GraphAnalyticsEngine
// has an associated deployment on AG:
//
// The following trigger asynchronous operations, which might take longer to complete:
//  - Load a graph from the deployment via two AQL queries (one for vertices, one for edges) [POST]
//  - Load a graph via the arangodump protocol [POST]
//  - Start computation job [POST]
//  - Write back result of computation job to deployment [POST]
//
// Work with graphs:
//  - List graphs [GET]
//  - Get information about a particular graph [GET]
//  - Delete a graph [DELETE]
//
// Work with jobs:
//  - List jobs [GET]
//  - Get status/result of one job [GET]
//  - Delete job [DELETE]
//
// Maintenance:
//  - Get metrics [GET]
//  - Shut down [DELETE]

service GraphAnalyticsEngineService {
    // Load data fetches data from the deployment and loads it into memory
    // of the engine for later processing.
    rpc GraphAnalyticsEngineLoadData(GraphAnalyticsEngineLoadDataRequest) returns (GraphAnalyticsEngineLoadDataResponse) {
        option (google.api.http) = {
            post: "/v1/loaddata"
            body: "*"
        };
    }

    // Load data fetches data from the deployment via AQL and load it into memory of the engine for later processing.
    // Required permissions:
    // - graphanalytics.engine.load-data on the graph analytics engine identified by the given ID.
    rpc GraphAnalyticsEngineLoadDataAql(GraphAnalyticsEngineLoadDataAqlRequest) returns (GraphAnalyticsEngineLoadDataResponse) {
        option (google.api.http) = {
            post: "/v1/loaddataaql"
            body: "*"
        };
    }

    // Process data with which is previously loaded with WCC and stores
    // the results in-memory.
    rpc GraphAnalyticsEngineRunWcc(GraphAnalyticsEngineWccSccRequest) returns (GraphAnalyticsEngineProcessResponse) {
        option (google.api.http) = {
            post: "/v1/wcc"
            body: "*"
        };
    }

    // Process data with which is previously loaded with SCC and stores
    // the results in-memory.
    rpc GraphAnalyticsEngineRunScc(GraphAnalyticsEngineWccSccRequest) returns (GraphAnalyticsEngineProcessResponse) {
        option (google.api.http) = {
            post: "/v1/scc"
            body: "*"
        };
    }

    // Run aggregation computation on components result which is previously
    // computed loaded and stores the results in-memory.
    rpc GraphAnalyticsEngineRunCompAggregation(GraphAnalyticsEngineAggregateComponentsRequest) returns (GraphAnalyticsEngineProcessResponse) {
        option (google.api.http) = {
            post: "/v1/aggregatecomponents"
            body: "*"
        };
    }

    // Run pagerank computation on data which is previously loaded  and stores
    // the results in-memory.
    rpc GraphAnalyticsEngineRunPageRank(GraphAnalyticsEnginePageRankRequest) returns (GraphAnalyticsEngineProcessResponse) {
        option (google.api.http) = {
            post: "/v1/pagerank"
            body: "*"
        };
    }

    // Run irank computation on data which is previously loaded  and stores
    // the results in-memory.
    rpc GraphAnalyticsEngineRunIRank(GraphAnalyticsEnginePageRankRequest) returns (GraphAnalyticsEngineProcessResponse) {
        option (google.api.http) = {
            post: "/v1/irank"
            body: "*"
        };
    }

    // Run label propagation on data which is previously loaded and stores
    // the results in-memory.
    rpc GraphAnalyticsEngineRunLabelPropagation(GraphAnalyticsEngineLabelPropagationRequest) returns (GraphAnalyticsEngineProcessResponse) {
        option (google.api.http) = {
            post: "/v1/labelpropagation"
            body: "*"
        };
    }

    // Stores the results from the previous process into the deployment.
    // Required permissions:
    // - graphanalytics.engine.store-results on the graph analytics engine identified by the given ID.
    rpc GraphAnalyticsEngineStoreResults(GraphAnalyticsEngineStoreResultsRequest) returns (GraphAnalyticsEngineStoreResultsResponse) {
        option (google.api.http) = {
            post: "/v1/storeresults"
            body: "*"
        };
    }

    // List the graphs in the engine:
    rpc GraphAnalyticsEngineListGraphs(Empty) returns (GraphAnalyticsEngineListGraphsResponse) {
        option (google.api.http) = {
            get: "/v1/graphs"
        };
    }
   
    // Get information about a specific graph:
    rpc GraphAnalyticsEngineGetGraph(GraphAnalyticsEngineGraphId) returns (GraphAnalyticsEngineGetGraphResponse) {
        option (google.api.http) = {
            get: "/v1/graphs/{graph_id}"
        };
    }

    // Delete a specific graph:
    rpc GraphAnalyticsEngineDeleteGraph(GraphAnalyticsEngineGraphId) returns (GraphAnalyticsEngineDeleteGraphResponse) {
        option (google.api.http) = {
            delete: "/v1/graphs/{graph_id}"
        };
    }

    // List the jobs in the engine:
    rpc GraphAnalyticsEngineListJobs(Empty) returns (GraphAnalyticsEngineListJobsResponse) {
        option (google.api.http) = {
            get: "/v1/jobs"
        };
    }
   
    // Get information about a specific job (in particular progress and result when done):
    rpc GraphAnalyticsEngineGetJob(GraphAnalyticsEngineJobId) returns (GraphAnalyticsEngineJob) {
        option (google.api.http) = {
            get: "/v1/jobs/{job_id}"
        };
    }

    // Delete a specific job
    rpc GraphAnalyticsEngineDeleteJob(GraphAnalyticsEngineJobId) returns (GraphAnalyticsEngineDeleteJobResponse) {
        option (google.api.http) = {
            delete: "/v1/{job_id}"
        };
    }

    // Get metrics, for now, the return type is not defined, therefore commented out:
    //rpc GraphAnalyticsEngineMetrics(Empty) returns (PrometheusMetrics) {
    //    option (google.api.http) = {
    //        get: "/v1/metrics"
    //    };
    //}

    // Shutdown
    rpc GraphAnalticsEngineShutdown(Empty) returns (GraphAnalyticsEngineShutdownResponse) {
        option(google.api.http) = {
            delete: "/v1/shutdown"
        };
    }
}

// Request arguments for GraphAnalyticsEngineLoadData.
message GraphAnalyticsEngineLoadDataRequest {
    // Database to get graph from
    string database = 1;
    // Graph name, this is optional, because one can also use a list of
    // vertex and edge collections:
    string graph_name = 2;
    // Optional list of vertex collections, must be given, if graph_name
    // is not given, or if data other than the graph topology is to be
    // loaded.
    repeated string vertex_collections = 3;
    // List of edge collections, must be given, if graph_name
    // is not given
    repeated string vertex_attributes = 4;
    // List of attributes to load into the column store for vertices
    repeated string vertex_attribute_types = 5;
    // Types for the vertex attributes, values allowed:
    //  - "string"
    //  - "float"
    //  - "integer"
    //  - "unsigned"
    repeated string edge_collections = 6;
    // Optional numeric value for thread parallelism. This is currently used
    // in 4 places. One is the number of async jobs launched to get data,
    // another is the number of threads to be launched to synchronously
    // work on incoming data. The third is the number of threads used
    // on each dbserver to produce data. And the fourth is the length of
    // the prefetch queue on dbservers. Potentially, we want to allow
    // more arguments to be able to fine tune this better.
    uint32 parallelism = 7;
    // Optional batch size
    uint64 batch_size = 8;
    // Map of engine-type specific custom fields (dynamic for this data-load operation)
    map<string, string> custom_fields = 9;
}

// Generic error
message GraphAnalyticsEngineErrorResponse {
    // Error code, 0 if no error
    int32 error_code = 1;
    // Error message, empty if no error
    string error_message = 2;
}

// Response arguments from GraphAnalyticsEngineLoadData.
message GraphAnalyticsEngineLoadDataResponse {
    // ID of the load data operation
    uint64 job_id = 1;
    // Graph ID
    uint64 graph_id = 2;
    // Error code, 0 if no error
    int32 error_code = 3;
    // Error message, empty if no error
    string error_message = 4;
}

// Request arguments for GraphAnalyticsEngineLoadDataAql.
message GraphAnalyticsEngineLoadDataAqlRequest {
    // Job ID for results
    uint64 job_id = 1;
    // Database to get graph from
    string database = 2;
    // Vertex query
    string vertex_query = 3;
    // Edge query
    string edge_query = 4;
    // Optional batch size
    uint64 batch_size = 5;
    // Map of engine-type specific custom fields (dynamic for this data-load operation)
    map<string, string> custom_fields = 6;
}

// Request arguments for WCC or SCC:
message GraphAnalyticsEngineWccSccRequest {    
    // Graph ID
    uint64 graph_id = 1;
   
    // Map of engine-type and algorithm-type specific custom fields (dynamic
    // for this process operation)
    map<string, string> custom_fields = 2;
}

// Response arguments from GraphAnalyticsEngineProcess.
message GraphAnalyticsEngineProcessResponse {
    // ID of the job
    uint64 job_id = 1;
    // Error code, 0 if no error
    int32 error_code = 2;
    // Error message, empty if no error
    string error_message = 3;
}

// Request arguments for GraphAnalyticsEngineRunCompAggregation:
message GraphAnalyticsEngineAggregateComponentsRequest {    
    // Graph ID
    uint64 graph_id = 1;
    // Job ID
    uint64 job_id = 2;
    // Aggregation attribute:
    string aggregation_attribute = 3;
}

// Request arguments for GraphAnalyticsEngineRunPageRank:
message GraphAnalyticsEnginePageRankRequest {    
    // Graph ID
    uint64 graph_id = 1;
    // Damping factor:
    double damping_factor = 2;
    // Maximal number of supersteps:
    uint32 maximum_supersteps = 3;
}

// Request arguments for GraphAnalyticsEngineRunLabelPropagation.
message GraphAnalyticsEngineLabelPropagationRequest {    
    // Graph ID
    uint64 graph_id = 1;
    // Start label attribute, must be stored in one column. Use id of vertex
    // if set to "@id".
    string start_label_attribute = 2;
    // Flag to indicate whether synchronous (true) or asynchronous label
    // propagation is used:
    bool synchronous = 3;
    // Flag indicating if ties in the label choice are broken randomly
    // (uniform distribution) or deterministically (smallest label amongst
    // the most frequent ones):
    bool random_tiebreak = 4;
}

// Request arguments for GraphAnalyticsEngineStoreResults.
message GraphAnalyticsEngineStoreResultsRequest {
    // ID of the jobs of which results are written
    repeated uint64 job_ids = 1;
    // attribute names to write results to
    repeated string attribute_names = 2;
    // Database in ArangoDB to use:
    string database = 3;
    // The following map maps collection names as found in the
    // _id entries of vertices to the collections into which
    // the result data should be written. The list of fields
    // is the attributes into which the result is written.
    // An insert operation with overwritemode "update" is used.
    map<string, string> vertex_collections = 4;
    // Optional numeric value for thread parallelism
    uint32 parallelism = 5;
    // Optional batch size
    uint64 batch_size = 6;
    // Target collection for non-graph results:
    string target_collection = 7;
    // Map of engine-type specific custom fields (dynamic for this
    // store-results operation)
    map<string, string> custom_fields = 8;
}

// Response arguments from GraphAnalyticsEngineStoreResults.
message GraphAnalyticsEngineStoreResultsResponse {
    // ID of the store results operation
    uint64 job_id = 1;
    // Error code, 0 if no error
    int32 error_code = 2;
    // Error message, empty if no error
    string error_message = 3;
}

// Response arguments from GraphAnalticsEngineListGraphs.
message GraphAnalyticsEngineListGraphsResponse {
    // Error code, 0 if no error
    int32 error_code = 1;
    // Error message, empty if no error
    string error_message = 2;
    // The graphs
    repeated GraphAnalyticsEngineGraph graphs = 3;
}

message GraphAnalyticsEngineGetGraphResponse {
    // Error code, 0 if no error
    int32 error_code = 1;
    // Error message, empty if no error
    string error_message = 2;
    // The graph
    GraphAnalyticsEngineGraph graph = 3;
}

// ID of an engine and id of a graph
message GraphAnalyticsEngineGraphId {
    // Graph ID (for path)
    string graph_id = 2;
}

// ID of an engine and id of a job
message GraphAnalyticsEngineJobId {
    // Graph ID (for path)
    string job_id = 2;
}

// Description of a graph.
message GraphAnalyticsEngineGraph {
    // ID of graph
    uint64 graph_id = 1;
    // Number of vertices:
    uint64 number_of_vertices = 2;
    // Number of edges:
    uint64 number_of_edges = 3;
    // Memory usage:
    uint64 memory_usage = 4;
}

// Response for a delete graph request.
message GraphAnalyticsEngineDeleteGraphResponse {
    // ID of graph
    uint64 graph_id = 1;
    // Error code, 0 if no error
    int32 error_code = 2;
    // Error message, empty if no error
    string error_message = 3;
}

// Response arguments from GraphAnalyticsEngineListJobs.
message GraphAnalyticsEngineListJobsResponse {
    // Error code, 0 if no error
    int32 error_code = 1;
    // Error message, empty if no error
    string error_message = 2;
    // The graphs
    repeated GraphAnalyticsEngineJob jobs = 3;
}

// Description of a job.
message GraphAnalyticsEngineJob {
    // ID of job
    uint64 job_id = 1;
    // Graph of job
    uint64 graph_id = 2;
    // Total progress, guaranteed to be positive, but could be 1
    uint32 total = 3;
    // Progress (0: no progress, equal to total: ready)
    uint32 progress = 4;
    // Error flag
    bool error = 5;
    // Error code
    int32 error_code = 6;
    // Error message
    string error_message = 7;
    // Optional source job
    string source_job = 8;
    // Computation type:
    string comp_type = 9;
}

// Response for a delete job request.
message GraphAnalyticsEngineDeleteJobResponse {
    // ID of job
    uint64 job_id = 1;
    // Error?
    bool error = 2;
    // Error code, 0 if no error
    int32 error_code = 3;
    // Error message, empty if no error
    string error_message = 4;
}

// Response for a shutdown request.
message GraphAnalyticsEngineShutdownResponse {
    // Error?
    bool error = 1;
    // Error code, 0 if no error
    int32 error_code = 2;
    // Error message, empty if no error
    string error_message = 3;
}

// Empty input:
message Empty {}

