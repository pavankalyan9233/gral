// 
// DISCLAIMER
// 
// Copyright 2023 ArangoDB GmbH, Cologne, Germany
// 

/**
 * GraphAnalyticsEngineService is an API for interacting with graph analytics engines. Each engine corresponds to a deployment on AG, granting direct database access for loading graphs and storing results. A single database deployment can accommodate multiple graph analytics engines (GAEs).
 *
 * Every call, which can take longer to complete, is asynchronous in the sense that it returns a job id and the result can/must be retrieved separately. Please note that these results must be deleted explicitly to free the memory used, since all results are stored in RAM.
 *
 * The following trigger asynchronous operations, which might take longer to complete:
 * <ul>
 *  <li> Load a graph from the deployment via two AQL queries (one for vertices, one for edges) [POST]</li>
 *  <li> Load a graph via the arangodump protocol [POST]</li>
 *  <li> Various calls to start computation jobs [POST]</li>
 *  <li> Write back result of computation job to deployment [POST]</li>
 * </ul>
 */
syntax = "proto3";

package arangodb.cloud.internal.graphanalytics.v1;

import "google/api/annotations.proto";

service GraphAnalyticsEngineService {
    // This API call fetches data from the deployment and loads it into memory
    // of the engine for later processing. One can either use a named graph
    // or a list of vertex collections and a list of edge collections.
    // Currently, the API call always loads all vertices and edges from these
    // collections. However, it is possible to select which attribute data
    // is loaded alongside the vertices and the edge topology. These
    // attribute values are stored into a column store, in which
    // each column corresponds to an attribute and has as many rows as there
    // are vertices in the graph.
    // Each loaded graph will get a numerical ID, with which it can be used
    // in computations.
    // This is an asynchronous job which returns the job id immediately. Use the GET
    // graph API with the returned graph ID to get information on errors and the outcome
    // of the loading.
    rpc GraphAnalyticsEngineLoadData(GraphAnalyticsEngineLoadDataRequest) returns (GraphAnalyticsEngineLoadDataResponse) {
        option (google.api.http) = {
            post: "/v1/loaddata"
            body: "*"
        };
    }

    // This API fetches data from the ArangoGraph deployment via AQL and load it into
    // memory of the engine for later processing. <b class="highlight-bold"> (NOT IMPLEMENTED YET) </b>
    rpc GraphAnalyticsEngineLoadDataAql(GraphAnalyticsEngineLoadDataAqlRequest) returns (GraphAnalyticsEngineLoadDataResponse) {
        option (google.api.http) = {
            post: "/v1/loaddataaql"
            body: "*"
        };
    }

    // Process a previously loaded graph with the weakly connected
    // components algorithm (WCC) and store the results in-memory. This
    // essentially means that the direction of edges is ignored and then
    // the connected components of the undirected graph are computed. The
    // computation will return a numerical job id, with which
    // the results can later be queried or written back to the database.
    // This is an asynchronous job which returns the job id immediately. Use the GET
    // job API with the job id to get information on progress, errors and
    // the outcome of the computation.
    rpc GraphAnalyticsEngineRunWcc(GraphAnalyticsEngineWccSccRequest) returns (GraphAnalyticsEngineProcessResponse) {
        option (google.api.http) = {
            post: "/v1/wcc"
            body: "*"
        };
    }

    // Process a previously loaded graph with the strongly connected
    // components algorithm (SCC) and store the results in-memory. This means
    // that the direction of the edges is taken into account and two vertices
    // A and B will be in the same strongly connected component if and
    // only if there is a directed path from A to B and from B to A. The
    // computation will return a numerical job id, with which
    // the results can later be queried or written back to the database.
    // This is an asynchronous job which returns the job id immediately.
    // Use the GET job API with the job id to get information on
    // progress, errors and the outcome of the computation.
    rpc GraphAnalyticsEngineRunScc(GraphAnalyticsEngineWccSccRequest) returns (GraphAnalyticsEngineProcessResponse) {
        option (google.api.http) = {
            post: "/v1/scc"
            body: "*"
        };
    }

    // Process a previously loaded graph and a computation which
    // has computed connected components (weakly or strongly) by aggregating
    // some vertex data over each component found. The result will be one
    // distribution map for each connected component. It is stored in memory.
    // The computation will return a numerical job id, with which the
    // results can later be queried or written back to the database.
    // This is an asynchronous job which returns the job id immediately.
    // Use the GET job API with the job id to get information on
    // progress, errors and the outcome of the computation.
    rpc GraphAnalyticsEngineRunCompAggregation(GraphAnalyticsEngineAggregateComponentsRequest) returns (GraphAnalyticsEngineProcessResponse) {
        option (google.api.http) = {
            post: "/v1/aggregatecomponents"
            body: "*"
        };
    }

    // Process a previously loaded graph with the pagerank
    // algorithm and store the results in-memory. There are some parameters
    // controlling the computation like the damping factor and the maximal
    // number of supersteps. See the input message documentation for details.
    // The computation will return a numerical job id, with which the
    // results can later be queried or written back to the database.
    // This is an asynchronous job which returns the job id immediately.
    // Use the GET job API with the job id to get information on
    // progress, errors and the outcome of the computation.
    rpc GraphAnalyticsEngineRunPageRank(GraphAnalyticsEnginePageRankRequest) returns (GraphAnalyticsEngineProcessResponse) {
        option (google.api.http) = {
            post: "/v1/pagerank"
            body: "*"
        };
    }

    // Process a previously loaded graph with custom python based execution
    // algorithm and store the results in-memory. See the input message
    // documentation for details.
    // The computation will return a numerical job id, with which the
    // results can later be queried or written back to the database.
    // This is an asynchronous job which returns the job id immediately.
    // Use the GET job API with the job id to get information on
    // progress, errors and the outcome of the computation.
    rpc GraphAnalyticsEngineRunPythonFunction(GraphAnalyticsEnginePythonFunctionRequest) returns (GraphAnalyticsEngineProcessResponse) {
        option (google.api.http) = {
            post: "/v1/python"
            body: "*"
        };
    }

    // Process a previously loaded graph with the irank
    // algorithm and store the results in-memory. The "irank" algorithms
    // is a variant of pagerank, which changes the initial weight of each
    // vertex. Rather than being 1/N where N is the number of vertices,
    // the value is here different depending on from which vertex collection
    // the vertex comes. If V is from vertex collection C and N is the number
    // of vertices in C, then the initial weight of V is 1/N.
    // As with pagerank, the total sum of ranks stays the same as an
    // invariant of the algorithm.
    // There are some parameters controlling the computation like the
    // damping factor and the maximal number of supersteps. See the
    // input message documentation for details. The computation will
    // return a numerical job id, with which the results can later be
    // queried or written back to the database.
    // This is an asynchronous job which returns the job id immediately.
    // Use the GET job API with the job id to get information on
    // progress, errors and the outcome of the computation.
    rpc GraphAnalyticsEngineRunIRank(GraphAnalyticsEnginePageRankRequest) returns (GraphAnalyticsEngineProcessResponse) {
        option (google.api.http) = {
            post: "/v1/irank"
            body: "*"
        };
    }

    // Process a previously loaded graph with the label
    // propagation algorithm and store the results in-memory. There are
    // some parameters controlling the computation like the name of the
    // attribute to choose the start label from, a flag to indicate
    // if the synchronous or the asynchronous variant is used and the
    // maximal number of supersteps. See the input message documentation
    // for details. The computation will return a numerical job id, with
    // which the results can later be queried or written back to the
    // database. This is an asynchronous job which returns the job id
    // immediately. Use the GET job API with the job id to get
    // information on progress, errors and the outcome of the
    // computation.
    rpc GraphAnalyticsEngineRunLabelPropagation(GraphAnalyticsEngineLabelPropagationRequest) returns (GraphAnalyticsEngineProcessResponse) {
        option (google.api.http) = {
            post: "/v1/labelpropagation"
            body: "*"
        };
    }

    // Process a previously loaded graph with the attribute
    // propagation algorithm and store the results in-memory.
    // The algorithm basically reads a list of labels from a column for each
    // vertex (see the loaddata operation, for which one can configure
    // which attributes are loaded into the column store).
    // The value can be empty or a string or a list of strings
    // and the set of labels for each vertex is initialized accordingly. The
    // algorithm will then simply propagate each label in each label set
    // along the edges to all reachable vertices and thus compute a new
    // set of labels. After a specified maximal number of steps or if no
    // label set changes any more the algorithm stops.
    //
    // BEWARE: If there are many labels in the system and the graph is
    // well-connected then the result can be huge!
    //
    // There are some parameters controlling the computation like the
    // name of the attribute to choose the start label from, whether
    // the synchronous or the asynchronous variant is to be used, if
    // we propagate along the the edges forwards or backwards and the
    // maximal number of supersteps. See the input message documentation
    // for details. The computation will return a numerical job id,
    // with which the results can later be queried or written back
    // to the database. This is an asynchronous job which returns
    // the job id immediately. Use the GET job API with the job id to
    // get information on progress, errors and the outcome of the
    // computation.
    rpc GraphAnalyticsEngineRunAttributePropagation(GraphAnalyticsEngineAttributePropagationRequest) returns (GraphAnalyticsEngineProcessResponse) {
        option (google.api.http) = {
            post: "/v1/attributepropagation"
            body: "*"
        };
    }

    // Stores the results from previous jobs into the deployment.
    // One can specify a number of job ids but the requirement is that
    // they produce the same number of results. For example, results from
    // different algorithms which produce one result per vertex can be
    // written to the database together. The target collection must already
    // exist and must be writable. The job produces one document per result
    // and one can prescribe which attribute names should be used for which
    // result.
    // There are some parameters controlling the computation. See
    // the input message description for details. The computation
    // will return a numerical job id, with which the progress can
    // be monitored. This is an asynchronous job which returns the
    // job id immediately. Use the GET job API with the job id to get
    // information on progress, errors and the outcome of the job.
    rpc GraphAnalyticsEngineStoreResults(GraphAnalyticsEngineStoreResultsRequest) returns (GraphAnalyticsEngineStoreResultsResponse) {
        option (google.api.http) = {
            post: "/v1/storeresults"
            body: "*"
        };
    }

    // List the graphs in the engine.
    rpc GraphAnalyticsEngineListGraphs(Empty) returns (GraphAnalyticsEngineListGraphsResponse) {
        option (google.api.http) = {
            get: "/v1/graphs"
        };
    }

    // Get information about a specific graph.
    rpc GraphAnalyticsEngineGetGraph(GraphAnalyticsEngineGraphId) returns (GraphAnalyticsEngineGetGraphResponse) {
        option (google.api.http) = {
            get: "/v1/graphs/{graph_id}"
        };
    }

    // Delete a specific graph from memory.
    rpc GraphAnalyticsEngineDeleteGraph(GraphAnalyticsEngineGraphId) returns (GraphAnalyticsEngineDeleteGraphResponse) {
        option (google.api.http) = {
            delete: "/v1/graphs/{graph_id}"
        };
    }

    // List the jobs in the engine (loading, computing or storing).
    rpc GraphAnalyticsEngineListJobs(Empty) returns (GraphAnalyticsEngineListJobsResponse) {
        option (google.api.http) = {
            get: "/v1/jobs"
        };
    }

    // Get information about a specific job (in particular progress and result when done).
    rpc GraphAnalyticsEngineGetJob(GraphAnalyticsEngineJobId) returns (GraphAnalyticsEngineJob) {
        option (google.api.http) = {
            get: "/v1/jobs/{job_id}"
        };
    }

    // Delete a specific job.
    rpc GraphAnalyticsEngineDeleteJob(GraphAnalyticsEngineJobId) returns (GraphAnalyticsEngineDeleteJobResponse) {
        option (google.api.http) = {
            delete: "/v1/jobs/{job_id}"
        };
    }

    // Get metrics, for now, the return type is not defined, therefore commented out:
    //rpc GraphAnalyticsEngineMetrics(Empty) returns (PrometheusMetrics) {
    //    option (google.api.http) = {
    //        get: "/v1/metrics"
    //    };
    //}

    // Get logs, for now, the return type is not defined, therefore commented out:
    //rpc GraphAnalyticsEngineLogs(Empty) returns (LogsAsText) {
    //    option (google.api.http) = {
    //        get: "/v1/logs"
    //    };
    //}

    // Shutdown service.
    rpc GraphAnalticsEngineShutdown(Empty) returns (GraphAnalyticsEngineShutdownResponse) {
        option(google.api.http) = {
            delete: "/v1/shutdown"
        };
    }
}

// Request arguments for GraphAnalyticsEngineLoadData.
message GraphAnalyticsEngineLoadDataRequest {
    // Retrieve graph from the specified database
    string database = 1;
    // Graph name, this is optional, because one can also use a list of
    // vertex and edge collections:
    string graph_name = 2;
    // Optional list of vertex collections. Must be set, if the `graph_name`
    // is not given, or if data other than the graph topology is to be
    // loaded.
    repeated string vertex_collections = 3;
    // List of edge collections. Must be set, if `graph_name` is not given.
    repeated string vertex_attributes = 4;
    // List of attributes to load into the column store for vertices.
    // The column store of the graph will contain one column for each
    // attribute listed here.
    repeated string vertex_attribute_types = 5;
    // Types for the vertex attributes. These values are allowed:
    //  - "string"
    //  - "float"
    //  - "integer"
    //  - "unsigned"
    repeated string edge_collections = 6;
    // Optional numeric value for thread parallelism. This is currently used
    // in four places. One is the number of async jobs launched to get data,
    // another is the number of threads to be launched to synchronously
    // work on incoming data. The third is the number of threads used
    // on each DBServer to produce data. And the fourth is the length of
    // the prefetch queue on DBServers. Potentially, we want to allow
    // more arguments to be able to fine tune this better.
    uint32 parallelism = 7;
    // Optional batch size
    uint64 batch_size = 8;
    // Map of engine-type specific custom fields (dynamic for this data-load operation)
    map<string, string> custom_fields = 9;
}

// Generic error
message GraphAnalyticsEngineErrorResponse {
    // Error code, 0 if no error
    int32 error_code = 1;
    // Error message, empty if no error
    string error_message = 2;
}

// Response arguments from GraphAnalyticsEngineLoadData.
message GraphAnalyticsEngineLoadDataResponse {
    // ID of the load data operation
    uint64 job_id = 1;
    // Graph ID
    uint64 graph_id = 2;
    // Error code, 0 if no error
    int32 error_code = 3;
    // Error message, empty if no error
    string error_message = 4;
}

// Request arguments for GraphAnalyticsEngineLoadDataAql.
message GraphAnalyticsEngineLoadDataAqlRequest {
    // Job ID for results
    uint64 job_id = 1;
    // Database to get graph from
    string database = 2;
    // Vertex query
    string vertex_query = 3;
    // Edge query
    string edge_query = 4;
    // Optional batch size
    uint64 batch_size = 5;
    // Map of engine-type specific custom fields (dynamic for this data-load operation)
    map<string, string> custom_fields = 6;
}

// Request arguments for WCC or SCC:
message GraphAnalyticsEngineWccSccRequest {
    // Graph ID
    uint64 graph_id = 1;

    // Map of engine-type and algorithm-type specific custom fields (dynamic
    // for this process operation)
    map<string, string> custom_fields = 2;
}

// Response arguments from GraphAnalyticsEngineProcess.
message GraphAnalyticsEngineProcessResponse {
    // ID of the job
    uint64 job_id = 1;
    // Error code, 0 if no error
    int32 error_code = 2;
    // Error message, empty if no error
    string error_message = 3;
}

// Request arguments for GraphAnalyticsEngineRunCompAggregation:
message GraphAnalyticsEngineAggregateComponentsRequest {
    // Graph ID
    uint64 graph_id = 1;
    // Job ID
    uint64 job_id = 2;
    // Aggregation attribute:
    string aggregation_attribute = 3;
}

// Request arguments for GraphAnalyticsEngineRunPageRank:
message GraphAnalyticsEnginePageRankRequest {
    // Graph ID
    uint64 graph_id = 1;
    // Damping factor:
    double damping_factor = 2;
    // Maximal number of supersteps:
    uint32 maximum_supersteps = 3;
}

// Request arguments for GraphAnalyticsEngineRunPageRank:
message GraphAnalyticsEnginePythonFunctionRequest {
    // Graph ID
    uint64 graph_id = 1;
    // The python-based code to be executed. A method called `def worker(graph)`
    // must be defined. The method must return a dataframe or dictionary 
    // with the results. The key inside that dict must represent the
    // vertex id, the value (actual computation result) can be of any
    // type.
    string function = 2;
    // Use cugraph (or regular pandas/pyarrow):
    bool use_cugraph = 3;
}

// Request arguments for GraphAnalyticsEngineRunLabelPropagation.
message GraphAnalyticsEngineLabelPropagationRequest {
    // Graph ID
    uint64 graph_id = 1;
    // Start label attribute, must be stored in one column of the column
    // store of the graph. Use id of vertex if set to "@id".
    string start_label_attribute = 2;
    // Flag to indicate whether synchronous (true) or asynchronous label
    // propagation is used:
    bool synchronous = 3;
    // Flag indicating if ties in the label choice are broken randomly
    // (uniform distribution) or deterministically (smallest label amongst
    // the most frequent ones):
    bool random_tiebreak = 4;
}

// Request arguments for GraphAnalyticsEngineRunAttributePropagation.
message GraphAnalyticsEngineAttributePropagationRequest {
    // Graph ID. This attribute must be given.
    uint64 graph_id = 1;
    // Start label attribute, must be stored in one column of the column
    // store of the graph. Use id of vertex if set to "@id". Values can
    // be empty or a string or a list of strings. All other values are
    // transformed into a string. This attribute must be given.
    string start_label_attribute = 2;
    // Flag to indicate whether synchronous (true) or asynchronous label
    // propagation is used. The default is asynchronous, i.e. `false`.
    bool synchronous = 3;
    // Flag to indicate whether the propagation happens forwards (along the
    // directed edges) or backwards (in the opposite direction). The default
    // is forwards, i.e. `false`.
    bool backwards = 4;
    // Maximum number of steps to do:
    uint32 maximum_supersteps = 5;
}

// Request arguments for GraphAnalyticsEngineStoreResults.
message GraphAnalyticsEngineStoreResultsRequest {
    // ID of the jobs of which results are written
    repeated uint64 job_ids = 1;
    // Attribute names to write results to
    repeated string attribute_names = 2;
    // Database in ArangoDB to use:
    string database = 3;
    // The following map maps collection names as found in the
    // _id entries of vertices to the collections into which
    // the result data should be written. The list of fields
    // is the attributes into which the result is written.
    // An insert operation with overwritemode "update" is used.
    map<string, string> vertex_collections = 4;
    // Optional numeric value for thread parallelism
    uint32 parallelism = 5;
    // Optional batch size
    uint64 batch_size = 6;
    // Target collection for non-graph results:
    string target_collection = 7;
    // Map of engine-type specific custom fields (dynamic for this
    // store-results operation)
    map<string, string> custom_fields = 8;
}

// Response arguments from GraphAnalyticsEngineStoreResults.
message GraphAnalyticsEngineStoreResultsResponse {
    // ID of the store results operation
    uint64 job_id = 1;
    // Error code, 0 if no error
    int32 error_code = 2;
    // Error message, empty if no error
    string error_message = 3;
}

// Response arguments from GraphAnalticsEngineListGraphs.
message GraphAnalyticsEngineListGraphsResponse {
    // Error code, 0 if no error
    int32 error_code = 1;
    // Error message, empty if no error
    string error_message = 2;
    // The graphs
    repeated GraphAnalyticsEngineGraph graphs = 3;
}

message GraphAnalyticsEngineGetGraphResponse {
    // Error code, 0 if no error
    int32 error_code = 1;
    // Error message, empty if no error
    string error_message = 2;
    // The graph
    GraphAnalyticsEngineGraph graph = 3;
}

// ID of an engine and id of a graph
message GraphAnalyticsEngineGraphId {
    // Graph ID (for path)
    string graph_id = 2;
}

// ID of an engine and id of a job
message GraphAnalyticsEngineJobId {
    // Graph ID (for path)
    string job_id = 2;
}

// Description of a graph.
message GraphAnalyticsEngineGraph {
    // ID of graph
    uint64 graph_id = 1;
    // Number of vertices:
    uint64 number_of_vertices = 2;
    // Number of edges:
    uint64 number_of_edges = 3;
    // Memory usage:
    uint64 memory_usage = 4;
    // Memory usage per vertex:
    uint64 memory_per_vertex = 5;
    // Memory usage per edge:
    uint64 memory_per_edge = 6;
}

// Response for a delete graph request.
message GraphAnalyticsEngineDeleteGraphResponse {
    // ID of graph
    uint64 graph_id = 1;
    // Error code, 0 if no error
    int32 error_code = 2;
    // Error message, empty if no error
    string error_message = 3;
}

// Response arguments from GraphAnalyticsEngineListJobs.
message GraphAnalyticsEngineListJobsResponse {
    // Error code, 0 if no error
    int32 error_code = 1;
    // Error message, empty if no error
    string error_message = 2;
    // The graphs
    repeated GraphAnalyticsEngineJob jobs = 3;
}

// Description of a job.
message GraphAnalyticsEngineJob {
    // ID of the current job
    uint64 job_id = 1;
    // Graph of the current job
    uint64 graph_id = 2;
    // Total progress. Guaranteed to be positive, but could be 1
    uint32 total = 3;
    // Progress (0: no progress, equal to total: ready)
    uint32 progress = 4;
    // Error flag
    bool error = 5;
    // Error code
    int32 error_code = 6;
    // Error message
    string error_message = 7;
    // Optional source job
    string source_job = 8;
    // Computation type:
    string comp_type = 9;
    // Memory usage:
    uint64 memory_usage = 10;
}

// Response for a delete job request.
message GraphAnalyticsEngineDeleteJobResponse {
    // ID of job
    uint64 job_id = 1;
    // Error?
    bool error = 2;
    // Error code, 0 if no error
    int32 error_code = 3;
    // Error message, empty if no error
    string error_message = 4;
}

// Response for a shutdown request.
message GraphAnalyticsEngineShutdownResponse {
    // Error?
    bool error = 1;
    // Error code, 0 if no error
    int32 error_code = 2;
    // Error message, empty if no error
    string error_message = 3;
}

// Empty input:
message Empty {}

